
mpu6050_kalman_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003f68  08003f68  00013f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004000  08004000  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08004000  08004000  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004000  08004000  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08004008  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000108  0800410c  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800410c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007838  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  00027965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00029478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a72  00000000  00000000  00029ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ba5  00000000  00000000  00040542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081edc  00000000  00000000  000490e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cafc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  000cb018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f4c 	.word	0x08003f4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	08003f4c 	.word	0x08003f4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fd9c 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f820 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f8c0 	bl	8001074 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef4:	f000 f862 	bl	8000fbc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ef8:	f000 f88e 	bl	8001018 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c2) == 1);
 8000efc:	bf00      	nop
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <main+0x40>)
 8000f00:	f000 f916 	bl	8001130 <MPU6050_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d0f9      	beq.n	8000efe <main+0x1a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 8000f0a:	4907      	ldr	r1, [pc, #28]	; (8000f28 <main+0x44>)
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <main+0x40>)
 8000f0e:	f000 f967 	bl	80011e0 <MPU6050_Read_All>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <main+0x48>)
 8000f18:	f001 f88a 	bl	8002030 <HAL_GPIO_TogglePin>
	  HAL_Delay (10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f000 fde3 	bl	8001ae8 <HAL_Delay>
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 8000f22:	e7f2      	b.n	8000f0a <main+0x26>
 8000f24:	2000017c 	.word	0x2000017c
 8000f28:	200001d0 	.word	0x200001d0
 8000f2c:	40011000 	.word	0x40011000

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2228      	movs	r2, #40	; 0x28
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fcc0 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f64:	2302      	movs	r3, #2
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 f873 	bl	8003064 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f84:	f000 f8ce 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fade 	bl	8003564 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fae:	f000 f8b9 	bl	8001124 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3740      	adds	r7, #64	; 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f001 f833 	bl	8002064 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f88e 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000128 	.word	0x20000128
 8001010:	40005400 	.word	0x40005400
 8001014:	00061a80 	.word	0x00061a80

08001018 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C2_Init+0x50>)
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <MX_I2C2_Init+0x54>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C2_Init+0x50>)
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_I2C2_Init+0x58>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C2_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_I2C2_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_I2C2_Init+0x50>)
 8001036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C2_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_I2C2_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_I2C2_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_I2C2_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_I2C2_Init+0x50>)
 8001056:	f001 f805 	bl	8002064 <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 f860 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000017c 	.word	0x2000017c
 800106c:	40005800 	.word	0x40005800
 8001070:	00061a80 	.word	0x00061a80

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_GPIO_Init+0xa8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_GPIO_Init+0xa8>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_GPIO_Init+0xa8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_GPIO_Init+0xa8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <MX_GPIO_Init+0xa8>)
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_GPIO_Init+0xa8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_GPIO_Init+0xa8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_GPIO_Init+0xa8>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_GPIO_Init+0xa8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_GPIO_Init+0xa8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <MX_GPIO_Init+0xa8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_GPIO_Init+0xa8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_GPIO_Init+0xac>)
 80010f0:	f000 ff86 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_GPIO_Init+0xac>)
 800110e:	f000 fdf3 	bl	8001cf8 <HAL_GPIO_Init>

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40011000 	.word	0x40011000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af04      	add	r7, sp, #16
 8001136:	6078      	str	r0, [r7, #4]
    uint8_t check=0;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
    uint8_t Data=0;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2301      	movs	r3, #1
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	f107 030f 	add.w	r3, r7, #15
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2275      	movs	r2, #117	; 0x75
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f9c3 	bl	80024e0 <HAL_I2C_Mem_Read>

    //if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 030e 	add.w	r3, r7, #14
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	226b      	movs	r2, #107	; 0x6b
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 f8ba 	bl	80022ec <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001178:	2307      	movs	r3, #7
 800117a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2301      	movs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	f107 030e 	add.w	r3, r7, #14
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2219      	movs	r2, #25
 800118e:	21d0      	movs	r1, #208	; 0xd0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 f8ab 	bl	80022ec <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 030e 	add.w	r3, r7, #14
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	221c      	movs	r2, #28
 80011ac:	21d0      	movs	r1, #208	; 0xd0
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f001 f89c 	bl	80022ec <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f107 030e 	add.w	r3, r7, #14
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	221b      	movs	r2, #27
 80011ca:	21d0      	movs	r1, #208	; 0xd0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 f88d 	bl	80022ec <HAL_I2C_Mem_Write>
        return 0;
 80011d2:	2300      	movs	r3, #0
    }
    return 1;
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0000      	movs	r0, r0
	...

080011e0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80011e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e4:	b094      	sub	sp, #80	; 0x50
 80011e6:	af04      	add	r7, sp, #16
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	230e      	movs	r3, #14
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	223b      	movs	r2, #59	; 0x3b
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f001 f96d 	bl	80024e0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001206:	7a3b      	ldrb	r3, [r7, #8]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	7a7b      	ldrb	r3, [r7, #9]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21a      	sxth	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800124a:	7c3b      	ldrb	r3, [r7, #16]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7c7b      	ldrb	r3, [r7, #17]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800125c:	7cbb      	ldrb	r3, [r7, #18]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800126e:	7d3b      	ldrb	r3, [r7, #20]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8b4 	bl	80003f4 <__aeabi_i2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4bb7      	ldr	r3, [pc, #732]	; (8001570 <MPU6050_Read_All+0x390>)
 8001292:	f7ff fa43 	bl	800071c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8a4 	bl	80003f4 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4baf      	ldr	r3, [pc, #700]	; (8001570 <MPU6050_Read_All+0x390>)
 80012b2:	f7ff fa33 	bl	800071c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	a3a2      	add	r3, pc, #648	; (adr r3, 8001558 <MPU6050_Read_All+0x378>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80012e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fc59 	bl	8000b9c <__aeabi_i2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	49a1      	ldr	r1, [pc, #644]	; (8001574 <MPU6050_Read_All+0x394>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd5c 	bl	8000dac <__aeabi_fdiv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	49a0      	ldr	r1, [pc, #640]	; (8001578 <MPU6050_Read_All+0x398>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb9b 	bl	8000a34 <__addsf3>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f871 	bl	80003f4 <__aeabi_i2d>
 8001312:	a393      	add	r3, pc, #588	; (adr r3, 8001560 <MPU6050_Read_All+0x380>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa00 	bl	800071c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f861 	bl	80003f4 <__aeabi_i2d>
 8001332:	a38b      	add	r3, pc, #556	; (adr r3, 8001560 <MPU6050_Read_All+0x380>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f9f0 	bl	800071c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f851 	bl	80003f4 <__aeabi_i2d>
 8001352:	a383      	add	r3, pc, #524	; (adr r3, 8001560 <MPU6050_Read_All+0x380>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f9e0 	bl	800071c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001366:	f000 fbb5 	bl	8001ad4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	4b83      	ldr	r3, [pc, #524]	; (800157c <MPU6050_Read_All+0x39c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f82e 	bl	80003d4 <__aeabi_ui2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <MPU6050_Read_All+0x3a0>)
 800137e:	f7ff f9cd 	bl	800071c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800138a:	f000 fba3 	bl	8001ad4 <HAL_GetTick>
 800138e:	4603      	mov	r3, r0
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <MPU6050_Read_All+0x39c>)
 8001392:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139a:	461a      	mov	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ac:	4619      	mov	r1, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013b4:	fb03 f301 	mul.w	r3, r3, r1
 80013b8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f81a 	bl	80003f4 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f002 fc16 	bl	8003bf8 <sqrt>
 80013cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013dc:	f7ff fadc 	bl	8000998 <__aeabi_dcmpeq>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d119      	bne.n	800141a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f801 	bl	80003f4 <__aeabi_i2d>
 80013f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013f6:	f7ff f991 	bl	800071c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f002 fa69 	bl	80038d8 <atan>
 8001406:	a358      	add	r3, pc, #352	; (adr r3, 8001568 <MPU6050_Read_All+0x388>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f85c 	bl	80004c8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001418:	e005      	b.n	8001426 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	425b      	negs	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ffe0 	bl	80003f4 <__aeabi_i2d>
 8001434:	4682      	mov	sl, r0
 8001436:	468b      	mov	fp, r1
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffd8 	bl	80003f4 <__aeabi_i2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4650      	mov	r0, sl
 800144a:	4659      	mov	r1, fp
 800144c:	f002 fbd1 	bl	8003bf2 <atan2>
 8001450:	a345      	add	r3, pc, #276	; (adr r3, 8001568 <MPU6050_Read_All+0x388>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f837 	bl	80004c8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <MPU6050_Read_All+0x3a4>)
 8001468:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800146c:	f7ff fa9e 	bl	80009ac <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <MPU6050_Read_All+0x2ac>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b41      	ldr	r3, [pc, #260]	; (8001588 <MPU6050_Read_All+0x3a8>)
 8001482:	f7ff fab1 	bl	80009e8 <__aeabi_dcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d114      	bne.n	80014b6 <MPU6050_Read_All+0x2d6>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MPU6050_Read_All+0x3a8>)
 8001492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001496:	f7ff faa7 	bl	80009e8 <__aeabi_dcmpgt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <MPU6050_Read_All+0x2ec>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <MPU6050_Read_All+0x3a4>)
 80014ac:	f7ff fa7e 	bl	80009ac <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 80014b6:	4935      	ldr	r1, [pc, #212]	; (800158c <MPU6050_Read_All+0x3ac>)
 80014b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014ca:	e012      	b.n	80014f2 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014da:	e9cd 2300 	strd	r2, r3, [sp]
 80014de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e2:	482a      	ldr	r0, [pc, #168]	; (800158c <MPU6050_Read_All+0x3ac>)
 80014e4:	f000 f856 	bl	8001594 <Kalman_getAngle>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014f8:	4690      	mov	r8, r2
 80014fa:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MPU6050_Read_All+0x3a8>)
 8001504:	4640      	mov	r0, r8
 8001506:	4649      	mov	r1, r9
 8001508:	f7ff fa6e 	bl	80009e8 <__aeabi_dcmpgt>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001518:	4614      	mov	r4, r2
 800151a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800152a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001532:	e9cd 2300 	strd	r2, r3, [sp]
 8001536:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <MPU6050_Read_All+0x3b0>)
 800153c:	f000 f82a 	bl	8001594 <Kalman_getAngle>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 800154a:	bf00      	nop
 800154c:	3740      	adds	r7, #64	; 0x40
 800154e:	46bd      	mov	sp, r7
 8001550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	40cc2900 	.word	0x40cc2900
 8001560:	00000000 	.word	0x00000000
 8001564:	40606000 	.word	0x40606000
 8001568:	1a63c1f8 	.word	0x1a63c1f8
 800156c:	404ca5dc 	.word	0x404ca5dc
 8001570:	40d00000 	.word	0x40d00000
 8001574:	43aa0000 	.word	0x43aa0000
 8001578:	42121eb8 	.word	0x42121eb8
 800157c:	20000228 	.word	0x20000228
 8001580:	408f4000 	.word	0x408f4000
 8001584:	c0568000 	.word	0xc0568000
 8001588:	40568000 	.word	0x40568000
 800158c:	20000048 	.word	0x20000048
 8001590:	20000000 	.word	0x20000000

08001594 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b092      	sub	sp, #72	; 0x48
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80015aa:	f7fe fdd5 	bl	8000158 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015c4:	f7fe ff80 	bl	80004c8 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fdc4 	bl	800015c <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015ee:	f7fe ff6b 	bl	80004c8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001600:	f7fe fdaa 	bl	8000158 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001612:	f7fe fda1 	bl	8000158 <__aeabi_dsub>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fd9a 	bl	800015c <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001634:	f7fe ff48 	bl	80004c8 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe fd8c 	bl	800015c <__adddf3>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800165a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800165e:	f7fe ff33 	bl	80004c8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe fd75 	bl	8000158 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001684:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001688:	f7fe ff1e 	bl	80004c8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fd60 	bl	8000158 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016b2:	f7fe ff09 	bl	80004c8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4620      	mov	r0, r4
 80016bc:	4629      	mov	r1, r5
 80016be:	f7fe fd4d 	bl	800015c <__adddf3>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016d8:	f7fe fd40 	bl	800015c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016ee:	f7ff f815 	bl	800071c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001704:	f7ff f80a 	bl	800071c <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800171a:	f7fe fd1d 	bl	8000158 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800172c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001730:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001734:	f7fe fec8 	bl	80004c8 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd0c 	bl	800015c <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800175c:	f7fe feb4 	bl	80004c8 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7fe fcf8 	bl	800015c <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800177c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001786:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001790:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001798:	f7fe fe96 	bl	80004c8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fcd8 	bl	8000158 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c0:	f7fe fe82 	bl	80004c8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fcc4 	bl	8000158 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e8:	f7fe fe6e 	bl	80004c8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fcb0 	bl	8000158 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001808:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001810:	f7fe fe5a 	bl	80004c8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fc9c 	bl	8000158 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	3748      	adds	r7, #72	; 0x48
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_MspInit+0x5c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_MspInit+0x5c>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_MspInit+0x5c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_MspInit+0x5c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_MspInit+0x60>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_MspInit+0x60>)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_I2C_MspInit+0xc8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d124      	bne.n	800190a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d8:	23c0      	movs	r3, #192	; 0xc0
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4821      	ldr	r0, [pc, #132]	; (8001970 <HAL_I2C_MspInit+0xd0>)
 80018ec:	f000 fa04 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_I2C_MspInit+0xcc>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001908:	e029      	b.n	800195e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_I2C_MspInit+0xd4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d124      	bne.n	800195e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_I2C_MspInit+0xcc>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_I2C_MspInit+0xcc>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_I2C_MspInit+0xcc>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800192c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001932:	2312      	movs	r3, #18
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <HAL_I2C_MspInit+0xd0>)
 8001942:	f000 f9d9 	bl	8001cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_I2C_MspInit+0xcc>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_I2C_MspInit+0xcc>)
 800194c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_I2C_MspInit+0xcc>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40021000 	.word	0x40021000
 8001970:	40010c00 	.word	0x40010c00
 8001974:	40005800 	.word	0x40005800

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <HardFault_Handler+0x4>

0800198a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <MemManage_Handler+0x4>

08001990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <BusFault_Handler+0x4>

08001996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f874 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019da:	490d      	ldr	r1, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f0:	4c0a      	ldr	r4, [pc, #40]	; (8001a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019fe:	f7ff ffe5 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f001 ff3b 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a06:	f7ff fa6d 	bl	8000ee4 <main>
  bx lr
 8001a0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001a14:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 8001a18:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001a1c:	20000230 	.word	0x20000230

08001a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_2_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x28>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x28>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f92b 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fefc 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f935 	bl	8001cde <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f90b 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000090 	.word	0x20000090
 8001aa8:	20000098 	.word	0x20000098
 8001aac:	20000094 	.word	0x20000094

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000098 	.word	0x20000098
 8001ad0:	2000022c 	.word	0x2000022c

08001ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	2000022c 	.word	0x2000022c

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffe0 	bl	8001ad4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000098 	.word	0x20000098

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff90 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff49 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff5e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffb0 	bl	8001c4c <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e169      	b.n	8001fe0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8158 	bne.w	8001fda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a9a      	ldr	r2, [pc, #616]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05e      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d34:	4a98      	ldr	r2, [pc, #608]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d875      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d3a:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <HAL_GPIO_Init+0x2a4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d058      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d40:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <HAL_GPIO_Init+0x2a4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d86f      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d46:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d052      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d4c:	4a94      	ldr	r2, [pc, #592]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d869      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d52:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04c      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d58:	4a92      	ldr	r2, [pc, #584]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d863      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_GPIO_Init+0x2b0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d046      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d64:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_GPIO_Init+0x2b0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d85d      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d82a      	bhi.n	8001dc4 <HAL_GPIO_Init+0xcc>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d859      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_GPIO_Init+0x80>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001dcd 	.word	0x08001dcd
 8001d80:	08001ddf 	.word	0x08001ddf
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001e27 	.word	0x08001e27
 8001d8c:	08001e27 	.word	0x08001e27
 8001d90:	08001e27 	.word	0x08001e27
 8001d94:	08001e27 	.word	0x08001e27
 8001d98:	08001e27 	.word	0x08001e27
 8001d9c:	08001e27 	.word	0x08001e27
 8001da0:	08001e27 	.word	0x08001e27
 8001da4:	08001e27 	.word	0x08001e27
 8001da8:	08001e27 	.word	0x08001e27
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e27 	.word	0x08001e27
 8001db4:	08001e27 	.word	0x08001e27
 8001db8:	08001e27 	.word	0x08001e27
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	4a79      	ldr	r2, [pc, #484]	; (8001fac <HAL_GPIO_Init+0x2b4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dca:	e02c      	b.n	8001e26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e029      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e024      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	3308      	adds	r3, #8
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e01f      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	330c      	adds	r3, #12
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e01a      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e013      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	611a      	str	r2, [r3, #16]
          break;
 8001e12:	e009      	b.n	8001e28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	615a      	str	r2, [r3, #20]
          break;
 8001e1e:	e003      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          break;
 8001e26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d801      	bhi.n	8001e32 <HAL_GPIO_Init+0x13a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_Init+0x13e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d802      	bhi.n	8001e44 <HAL_GPIO_Init+0x14c>
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x152>
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3b08      	subs	r3, #8
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	210f      	movs	r1, #15
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80b1 	beq.w	8001fda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e90:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_GPIO_Init+0x2bc>)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_GPIO_Init+0x2c0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_GPIO_Init+0x1ec>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <HAL_GPIO_Init+0x2c4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x1e4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <HAL_GPIO_Init+0x2cc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_GPIO_Init+0x1e0>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ed8:	2304      	movs	r3, #4
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef6:	492f      	ldr	r1, [pc, #188]	; (8001fb4 <HAL_GPIO_Init+0x2bc>)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	492c      	ldr	r1, [pc, #176]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4928      	ldr	r1, [pc, #160]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	491e      	ldr	r1, [pc, #120]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
 8001f94:	e021      	b.n	8001fda <HAL_GPIO_Init+0x2e2>
 8001f96:	bf00      	nop
 8001f98:	10320000 	.word	0x10320000
 8001f9c:	10310000 	.word	0x10310000
 8001fa0:	10220000 	.word	0x10220000
 8001fa4:	10210000 	.word	0x10210000
 8001fa8:	10120000 	.word	0x10120000
 8001fac:	10110000 	.word	0x10110000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40010c00 	.word	0x40010c00
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40011400 	.word	0x40011400
 8001fc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4909      	ldr	r1, [pc, #36]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f ae8e 	bne.w	8001d0c <HAL_GPIO_Init+0x14>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	372c      	adds	r7, #44	; 0x2c
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43d9      	mvns	r1, r3
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	400b      	ands	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e12b      	b.n	80022ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fc08 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c8:	f001 fba0 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a81      	ldr	r2, [pc, #516]	; (80022d8 <HAL_I2C_Init+0x274>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d807      	bhi.n	80020e8 <HAL_I2C_Init+0x84>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a80      	ldr	r2, [pc, #512]	; (80022dc <HAL_I2C_Init+0x278>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	bf94      	ite	ls
 80020e0:	2301      	movls	r3, #1
 80020e2:	2300      	movhi	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e006      	b.n	80020f6 <HAL_I2C_Init+0x92>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a7d      	ldr	r2, [pc, #500]	; (80022e0 <HAL_I2C_Init+0x27c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	bf94      	ite	ls
 80020f0:	2301      	movls	r3, #1
 80020f2:	2300      	movhi	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0e7      	b.n	80022ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a78      	ldr	r2, [pc, #480]	; (80022e4 <HAL_I2C_Init+0x280>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <HAL_I2C_Init+0x274>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d802      	bhi.n	8002138 <HAL_I2C_Init+0xd4>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	e009      	b.n	800214c <HAL_I2C_Init+0xe8>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_I2C_Init+0x284>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800215e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	495c      	ldr	r1, [pc, #368]	; (80022d8 <HAL_I2C_Init+0x274>)
 8002168:	428b      	cmp	r3, r1
 800216a:	d819      	bhi.n	80021a0 <HAL_I2C_Init+0x13c>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e59      	subs	r1, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fbb1 f3f3 	udiv	r3, r1, r3
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002180:	400b      	ands	r3, r1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_I2C_Init+0x138>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e59      	subs	r1, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fbb1 f3f3 	udiv	r3, r1, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219a:	e051      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 800219c:	2304      	movs	r3, #4
 800219e:	e04f      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <HAL_I2C_Init+0x168>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e012      	b.n	80021f2 <HAL_I2C_Init+0x18e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	0099      	lsls	r1, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x196>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e022      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10e      	bne.n	8002220 <HAL_I2C_Init+0x1bc>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e58      	subs	r0, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	fbb0 f3f3 	udiv	r3, r0, r3
 8002214:	3301      	adds	r3, #1
 8002216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Init+0x1dc>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1e58      	subs	r0, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	0099      	lsls	r1, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	fbb0 f3f3 	udiv	r3, r0, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6809      	ldr	r1, [r1, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800226e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6911      	ldr	r1, [r2, #16]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	000186a0 	.word	0x000186a0
 80022dc:	001e847f 	.word	0x001e847f
 80022e0:	003d08ff 	.word	0x003d08ff
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	10624dd3 	.word	0x10624dd3

080022ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002306:	f7ff fbe5 	bl	8001ad4 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b20      	cmp	r3, #32
 8002316:	f040 80d9 	bne.w	80024cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2319      	movs	r3, #25
 8002320:	2201      	movs	r2, #1
 8002322:	496d      	ldr	r1, [pc, #436]	; (80024d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fcc1 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002330:	2302      	movs	r3, #2
 8002332:	e0cc      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Mem_Write+0x56>
 800233e:	2302      	movs	r3, #2
 8002340:	e0c5      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d007      	beq.n	8002368 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2221      	movs	r2, #33	; 0x21
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <HAL_I2C_Mem_Write+0x1f0>)
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023aa:	88f8      	ldrh	r0, [r7, #6]
 80023ac:	893a      	ldrh	r2, [r7, #8]
 80023ae:	8979      	ldrh	r1, [r7, #10]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4603      	mov	r3, r0
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 faf8 	bl	80029b0 <I2C_RequestMemoryWrite>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d052      	beq.n	800246c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e081      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fd42 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b04      	cmp	r3, #4
 8002432:	d11b      	bne.n	800246c <HAL_I2C_Mem_Write+0x180>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d017      	beq.n	800246c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1aa      	bne.n	80023ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fd2e 	bl	8002eda <I2C_WaitOnBTFFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2b04      	cmp	r3, #4
 800248a:	d107      	bne.n	800249c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e016      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	00100002 	.word	0x00100002
 80024dc:	ffff0000 	.word	0xffff0000

080024e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	817b      	strh	r3, [r7, #10]
 80024f2:	460b      	mov	r3, r1
 80024f4:	813b      	strh	r3, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024fe:	f7ff fae9 	bl	8001ad4 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	f040 8244 	bne.w	800299a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2319      	movs	r3, #25
 8002518:	2201      	movs	r2, #1
 800251a:	4982      	ldr	r1, [pc, #520]	; (8002724 <HAL_I2C_Mem_Read+0x244>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fbc5 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e237      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2C_Mem_Read+0x5a>
 8002536:	2302      	movs	r3, #2
 8002538:	e230      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d007      	beq.n	8002560 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2222      	movs	r2, #34	; 0x22
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a62      	ldr	r2, [pc, #392]	; (8002728 <HAL_I2C_Mem_Read+0x248>)
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a2:	88f8      	ldrh	r0, [r7, #6]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4603      	mov	r3, r0
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fa92 	bl	8002adc <I2C_RequestMemoryRead>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1ec      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e1c0      	b.n	8002974 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d11e      	bne.n	8002638 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002608:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800260a:	b672      	cpsid	i
}
 800260c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002634:	b662      	cpsie	i
}
 8002636:	e035      	b.n	80026a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11e      	bne.n	800267e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800267a:	b662      	cpsie	i
}
 800267c:	e012      	b.n	80026a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800268c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026a4:	e166      	b.n	8002974 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	f200 811f 	bhi.w	80028ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d123      	bne.n	8002700 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fc4d 	bl	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e167      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026fe:	e139      	b.n	8002974 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b02      	cmp	r3, #2
 8002706:	d152      	bne.n	80027ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2200      	movs	r2, #0
 8002710:	4906      	ldr	r1, [pc, #24]	; (800272c <HAL_I2C_Mem_Read+0x24c>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 faca 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e13c      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
 8002722:	bf00      	nop
 8002724:	00100002 	.word	0x00100002
 8002728:	ffff0000 	.word	0xffff0000
 800272c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002730:	b672      	cpsid	i
}
 8002732:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002776:	b662      	cpsie	i
}
 8002778:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ac:	e0e2      	b.n	8002974 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2200      	movs	r2, #0
 80027b6:	497b      	ldr	r1, [pc, #492]	; (80029a4 <HAL_I2C_Mem_Read+0x4c4>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa77 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0e9      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800280e:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <HAL_I2C_Mem_Read+0x4c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_I2C_Mem_Read+0x4cc>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a1a      	lsrs	r2, r3, #8
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00da      	lsls	r2, r3, #3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	3b01      	subs	r3, #1
 800282c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002856:	b662      	cpsie	i
}
 8002858:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e09a      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d1d9      	bne.n	8002828 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028b6:	b662      	cpsie	i
}
 80028b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ec:	e042      	b.n	8002974 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb32 	bl	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e04c      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d118      	bne.n	8002974 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f ae94 	bne.w	80026a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	00010004 	.word	0x00010004
 80029a8:	20000090 	.word	0x20000090
 80029ac:	14f8b589 	.word	0x14f8b589

080029b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	817b      	strh	r3, [r7, #10]
 80029c2:	460b      	mov	r3, r1
 80029c4:	813b      	strh	r3, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f960 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d103      	bne.n	8002a0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e05f      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	492d      	ldr	r1, [pc, #180]	; (8002ad8 <I2C_RequestMemoryWrite+0x128>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f998 	bl	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04c      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa02 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02b      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e021      	b.n	8002acc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a88:	893b      	ldrh	r3, [r7, #8]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	6a39      	ldr	r1, [r7, #32]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9dc 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d107      	bne.n	8002abe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e005      	b.n	8002ace <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00010002 	.word	0x00010002

08002adc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	460b      	mov	r3, r1
 8002af0:	813b      	strh	r3, [r7, #8]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f8c2 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d103      	bne.n	8002b46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0aa      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	4952      	ldr	r1, [pc, #328]	; (8002ca8 <I2C_RequestMemoryRead+0x1cc>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8fa 	bl	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e097      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f964 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e076      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]
 8002bc2:	e021      	b.n	8002c08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f93e 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e050      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	6a39      	ldr	r1, [r7, #32]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f923 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e035      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f82b 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d103      	bne.n	8002c74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e013      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <I2C_RequestMemoryRead+0x1cc>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f863 	bl	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010002 	.word	0x00010002

08002cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbc:	e025      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d021      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe ff05 	bl	8001ad4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e023      	b.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10d      	bne.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	e00c      	b.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d0b6      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d68:	e051      	b.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d123      	bne.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e046      	b.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d021      	beq.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe fe83 	bl	8001ad4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e020      	b.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10c      	bne.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e00b      	b.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d18d      	bne.n	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e64:	e02d      	b.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8ce 	bl	8003008 <I2C_IsAcknowledgeFailed>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e02d      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d021      	beq.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fe29 	bl	8001ad4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d116      	bne.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d1ca      	bne.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee6:	e02d      	b.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f88d 	bl	8003008 <I2C_IsAcknowledgeFailed>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e02d      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d021      	beq.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7fe fde8 	bl	8001ad4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e007      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d1ca      	bne.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f68:	e042      	b.n	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d119      	bne.n	8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0210 	mvn.w	r2, #16
 8002f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e029      	b.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7fe fd92 	bl	8001ad4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d1b5      	bne.n	8002f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301e:	d11b      	bne.n	8003058 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003028:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e26c      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8087 	beq.w	8003192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b04      	cmp	r3, #4
 800308e:	d00c      	beq.n	80030aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003090:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d112      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
 800309c:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06c      	beq.n	8003190 <HAL_RCC_OscConfig+0x12c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d168      	bne.n	8003190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e246      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x76>
 80030cc:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7f      	ldr	r2, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e02e      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x98>
 80030e2:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7a      	ldr	r2, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a77      	ldr	r2, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0xbc>
 8003106:	4b72      	ldr	r3, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a71      	ldr	r2, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 8003120:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fcc8 	bl	8001ad4 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fcc4 	bl	8001ad4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1fa      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xe4>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fcb4 	bl	8001ad4 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fcb0 	bl	8001ad4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1e6      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x10c>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319e:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x18c>
 80031b6:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x176>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1ba      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4939      	ldr	r1, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe fc69 	bl	8001ad4 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe fc65 	bl	8001ad4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e19b      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4927      	ldr	r1, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fc48 	bl	8001ad4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fc44 	bl	8001ad4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e17a      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d03a      	beq.n	80032e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fe fc28 	bl	8001ad4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fc24 	bl	8001ad4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e15a      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f000 fac4 	bl	8003834 <RCC_Delay>
 80032ac:	e01c      	b.n	80032e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe fc0e 	bl	8001ad4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ba:	e00f      	b.n	80032dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032bc:	f7fe fc0a 	bl	8001ad4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d908      	bls.n	80032dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e140      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	42420000 	.word	0x42420000
 80032d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b9e      	ldr	r3, [pc, #632]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e9      	bne.n	80032bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a6 	beq.w	8003442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b97      	ldr	r3, [pc, #604]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b94      	ldr	r3, [pc, #592]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a93      	ldr	r2, [pc, #588]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b91      	ldr	r3, [pc, #580]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b8e      	ldr	r3, [pc, #568]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b8b      	ldr	r3, [pc, #556]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a8a      	ldr	r2, [pc, #552]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe fbcb 	bl	8001ad4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe fbc7 	bl	8001ad4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	; 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0fd      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x312>
 8003368:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a7a      	ldr	r2, [pc, #488]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	e02d      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x334>
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a72      	ldr	r2, [pc, #456]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	e01c      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x356>
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a6c      	ldr	r2, [pc, #432]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a69      	ldr	r2, [pc, #420]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a66      	ldr	r2, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a63      	ldr	r2, [pc, #396]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe fb7b 	bl	8001ad4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe fb77 	bl	8001ad4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0ab      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ee      	beq.n	80033e2 <HAL_RCC_OscConfig+0x37e>
 8003404:	e014      	b.n	8003430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fb65 	bl	8001ad4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fb61 	bl	8001ad4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e095      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b48      	ldr	r3, [pc, #288]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a47      	ldr	r2, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8081 	beq.w	800354e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d061      	beq.n	800351c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d146      	bne.n	80034ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe fb35 	bl	8001ad4 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fb31 	bl	8001ad4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e067      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003496:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	492d      	ldr	r1, [pc, #180]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a19      	ldr	r1, [r3, #32]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	430b      	orrs	r3, r1
 80034ba:	4927      	ldr	r1, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fe fb05 	bl	8001ad4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe fb01 	bl	8001ad4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e037      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x46a>
 80034ec:	e02f      	b.n	800354e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe faee 	bl	8001ad4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe faea 	bl	8001ad4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e020      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x498>
 800351a:	e018      	b.n	800354e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e013      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	429a      	cmp	r2, r3
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
 8003560:	42420060 	.word	0x42420060

08003564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0d0      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0207 	bic.w	r2, r3, #7
 800358e:	4965      	ldr	r1, [pc, #404]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b8      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494d      	ldr	r1, [pc, #308]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d040      	beq.n	8003684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07f      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e073      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06b      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4936      	ldr	r1, [pc, #216]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003654:	f7fe fa3e 	bl	8001ad4 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	e00a      	b.n	8003672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe fa3a 	bl	8001ad4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e053      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 020c 	and.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	429a      	cmp	r2, r3
 8003682:	d1eb      	bne.n	800365c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d210      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4922      	ldr	r1, [pc, #136]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e032      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4916      	ldr	r1, [pc, #88]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490e      	ldr	r1, [pc, #56]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f2:	f000 f821 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	490a      	ldr	r1, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	5ccb      	ldrb	r3, [r1, r3]
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1cc>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f99c 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40022000 	.word	0x40022000
 8003728:	40021000 	.word	0x40021000
 800372c:	08003f78 	.word	0x08003f78
 8003730:	20000090 	.word	0x20000090
 8003734:	20000094 	.word	0x20000094

08003738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b490      	push	{r4, r7}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003740:	1d3c      	adds	r4, r7, #4
 8003742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003748:	f240 2301 	movw	r3, #513	; 0x201
 800374c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x40>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x46>
 8003776:	e02d      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377a:	623b      	str	r3, [r7, #32]
      break;
 800377c:	e02d      	b.n	80037da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0c9b      	lsrs	r3, r3, #18
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800378a:	4413      	add	r3, r2
 800378c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003790:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c5b      	lsrs	r3, r3, #17
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037aa:	4413      	add	r3, r2
 80037ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b6:	fb02 f203 	mul.w	r2, r2, r3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e004      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	623b      	str	r3, [r7, #32]
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d6:	623b      	str	r3, [r7, #32]
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6a3b      	ldr	r3, [r7, #32]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc90      	pop	{r4, r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	08003f68 	.word	0x08003f68
 80037ec:	40021000 	.word	0x40021000
 80037f0:	007a1200 	.word	0x007a1200
 80037f4:	003d0900 	.word	0x003d0900

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b02      	ldr	r3, [pc, #8]	; (8003808 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000090 	.word	0x20000090

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff2 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	08003f88 	.word	0x08003f88

08003834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <RCC_Delay+0x34>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <RCC_Delay+0x38>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003850:	bf00      	nop
  }
  while (Delay --);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	60fa      	str	r2, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f9      	bne.n	8003850 <RCC_Delay+0x1c>
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000090 	.word	0x20000090
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <__errno>:
 8003870:	4b01      	ldr	r3, [pc, #4]	; (8003878 <__errno+0x8>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000009c 	.word	0x2000009c

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	2600      	movs	r6, #0
 8003880:	4d0c      	ldr	r5, [pc, #48]	; (80038b4 <__libc_init_array+0x38>)
 8003882:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003884:	1b64      	subs	r4, r4, r5
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	f000 fb5e 	bl	8003f4c <_init>
 8003890:	2600      	movs	r6, #0
 8003892:	4d0a      	ldr	r5, [pc, #40]	; (80038bc <__libc_init_array+0x40>)
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <__libc_init_array+0x44>)
 8003896:	1b64      	subs	r4, r4, r5
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08004000 	.word	0x08004000
 80038b8:	08004000 	.word	0x08004000
 80038bc:	08004000 	.word	0x08004000
 80038c0:	08004004 	.word	0x08004004

080038c4 <memset>:
 80038c4:	4603      	mov	r3, r0
 80038c6:	4402      	add	r2, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>
 80038d4:	0000      	movs	r0, r0
	...

080038d8 <atan>:
 80038d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	4bb6      	ldr	r3, [pc, #728]	; (8003bb8 <atan+0x2e0>)
 80038de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80038e2:	429e      	cmp	r6, r3
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	468b      	mov	fp, r1
 80038ea:	dd17      	ble.n	800391c <atan+0x44>
 80038ec:	4bb3      	ldr	r3, [pc, #716]	; (8003bbc <atan+0x2e4>)
 80038ee:	429e      	cmp	r6, r3
 80038f0:	dc01      	bgt.n	80038f6 <atan+0x1e>
 80038f2:	d109      	bne.n	8003908 <atan+0x30>
 80038f4:	b140      	cbz	r0, 8003908 <atan+0x30>
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	4620      	mov	r0, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	f7fc fc2d 	bl	800015c <__adddf3>
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	e005      	b.n	8003914 <atan+0x3c>
 8003908:	f1bb 0f00 	cmp.w	fp, #0
 800390c:	4cac      	ldr	r4, [pc, #688]	; (8003bc0 <atan+0x2e8>)
 800390e:	f300 8121 	bgt.w	8003b54 <atan+0x27c>
 8003912:	4dac      	ldr	r5, [pc, #688]	; (8003bc4 <atan+0x2ec>)
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391c:	4baa      	ldr	r3, [pc, #680]	; (8003bc8 <atan+0x2f0>)
 800391e:	429e      	cmp	r6, r3
 8003920:	dc11      	bgt.n	8003946 <atan+0x6e>
 8003922:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003926:	429e      	cmp	r6, r3
 8003928:	dc0a      	bgt.n	8003940 <atan+0x68>
 800392a:	a38b      	add	r3, pc, #556	; (adr r3, 8003b58 <atan+0x280>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc fc14 	bl	800015c <__adddf3>
 8003934:	2200      	movs	r2, #0
 8003936:	4ba5      	ldr	r3, [pc, #660]	; (8003bcc <atan+0x2f4>)
 8003938:	f7fd f856 	bl	80009e8 <__aeabi_dcmpgt>
 800393c:	2800      	cmp	r0, #0
 800393e:	d1e9      	bne.n	8003914 <atan+0x3c>
 8003940:	f04f 3aff 	mov.w	sl, #4294967295
 8003944:	e027      	b.n	8003996 <atan+0xbe>
 8003946:	f000 f951 	bl	8003bec <fabs>
 800394a:	4ba1      	ldr	r3, [pc, #644]	; (8003bd0 <atan+0x2f8>)
 800394c:	4604      	mov	r4, r0
 800394e:	429e      	cmp	r6, r3
 8003950:	460d      	mov	r5, r1
 8003952:	f300 80b8 	bgt.w	8003ac6 <atan+0x1ee>
 8003956:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800395a:	429e      	cmp	r6, r3
 800395c:	f300 809c 	bgt.w	8003a98 <atan+0x1c0>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	f7fc fbfa 	bl	800015c <__adddf3>
 8003968:	2200      	movs	r2, #0
 800396a:	4b98      	ldr	r3, [pc, #608]	; (8003bcc <atan+0x2f4>)
 800396c:	f7fc fbf4 	bl	8000158 <__aeabi_dsub>
 8003970:	2200      	movs	r2, #0
 8003972:	4606      	mov	r6, r0
 8003974:	460f      	mov	r7, r1
 8003976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fc fbed 	bl	800015c <__adddf3>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fc fec7 	bl	800071c <__aeabi_ddiv>
 800398e:	f04f 0a00 	mov.w	sl, #0
 8003992:	4604      	mov	r4, r0
 8003994:	460d      	mov	r5, r1
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fd93 	bl	80004c8 <__aeabi_dmul>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4680      	mov	r8, r0
 80039a8:	4689      	mov	r9, r1
 80039aa:	f7fc fd8d 	bl	80004c8 <__aeabi_dmul>
 80039ae:	a36c      	add	r3, pc, #432	; (adr r3, 8003b60 <atan+0x288>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	4606      	mov	r6, r0
 80039b6:	460f      	mov	r7, r1
 80039b8:	f7fc fd86 	bl	80004c8 <__aeabi_dmul>
 80039bc:	a36a      	add	r3, pc, #424	; (adr r3, 8003b68 <atan+0x290>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fbcb 	bl	800015c <__adddf3>
 80039c6:	4632      	mov	r2, r6
 80039c8:	463b      	mov	r3, r7
 80039ca:	f7fc fd7d 	bl	80004c8 <__aeabi_dmul>
 80039ce:	a368      	add	r3, pc, #416	; (adr r3, 8003b70 <atan+0x298>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fbc2 	bl	800015c <__adddf3>
 80039d8:	4632      	mov	r2, r6
 80039da:	463b      	mov	r3, r7
 80039dc:	f7fc fd74 	bl	80004c8 <__aeabi_dmul>
 80039e0:	a365      	add	r3, pc, #404	; (adr r3, 8003b78 <atan+0x2a0>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fbb9 	bl	800015c <__adddf3>
 80039ea:	4632      	mov	r2, r6
 80039ec:	463b      	mov	r3, r7
 80039ee:	f7fc fd6b 	bl	80004c8 <__aeabi_dmul>
 80039f2:	a363      	add	r3, pc, #396	; (adr r3, 8003b80 <atan+0x2a8>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc fbb0 	bl	800015c <__adddf3>
 80039fc:	4632      	mov	r2, r6
 80039fe:	463b      	mov	r3, r7
 8003a00:	f7fc fd62 	bl	80004c8 <__aeabi_dmul>
 8003a04:	a360      	add	r3, pc, #384	; (adr r3, 8003b88 <atan+0x2b0>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fba7 	bl	800015c <__adddf3>
 8003a0e:	4642      	mov	r2, r8
 8003a10:	464b      	mov	r3, r9
 8003a12:	f7fc fd59 	bl	80004c8 <__aeabi_dmul>
 8003a16:	a35e      	add	r3, pc, #376	; (adr r3, 8003b90 <atan+0x2b8>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	4680      	mov	r8, r0
 8003a1e:	4689      	mov	r9, r1
 8003a20:	4630      	mov	r0, r6
 8003a22:	4639      	mov	r1, r7
 8003a24:	f7fc fd50 	bl	80004c8 <__aeabi_dmul>
 8003a28:	a35b      	add	r3, pc, #364	; (adr r3, 8003b98 <atan+0x2c0>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fb93 	bl	8000158 <__aeabi_dsub>
 8003a32:	4632      	mov	r2, r6
 8003a34:	463b      	mov	r3, r7
 8003a36:	f7fc fd47 	bl	80004c8 <__aeabi_dmul>
 8003a3a:	a359      	add	r3, pc, #356	; (adr r3, 8003ba0 <atan+0x2c8>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fb8a 	bl	8000158 <__aeabi_dsub>
 8003a44:	4632      	mov	r2, r6
 8003a46:	463b      	mov	r3, r7
 8003a48:	f7fc fd3e 	bl	80004c8 <__aeabi_dmul>
 8003a4c:	a356      	add	r3, pc, #344	; (adr r3, 8003ba8 <atan+0x2d0>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fb81 	bl	8000158 <__aeabi_dsub>
 8003a56:	4632      	mov	r2, r6
 8003a58:	463b      	mov	r3, r7
 8003a5a:	f7fc fd35 	bl	80004c8 <__aeabi_dmul>
 8003a5e:	a354      	add	r3, pc, #336	; (adr r3, 8003bb0 <atan+0x2d8>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc fb78 	bl	8000158 <__aeabi_dsub>
 8003a68:	4632      	mov	r2, r6
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	f7fc fd2c 	bl	80004c8 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4640      	mov	r0, r8
 8003a76:	4649      	mov	r1, r9
 8003a78:	f7fc fb70 	bl	800015c <__adddf3>
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	462b      	mov	r3, r5
 8003a80:	f7fc fd22 	bl	80004c8 <__aeabi_dmul>
 8003a84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	d144      	bne.n	8003b18 <atan+0x240>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fc fb61 	bl	8000158 <__aeabi_dsub>
 8003a96:	e734      	b.n	8003902 <atan+0x2a>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <atan+0x2f4>)
 8003a9c:	f7fc fb5c 	bl	8000158 <__aeabi_dsub>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	460f      	mov	r7, r1
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <atan+0x2f4>)
 8003aac:	f7fc fb56 	bl	800015c <__adddf3>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	4639      	mov	r1, r7
 8003ab8:	f7fc fe30 	bl	800071c <__aeabi_ddiv>
 8003abc:	f04f 0a01 	mov.w	sl, #1
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	e767      	b.n	8003996 <atan+0xbe>
 8003ac6:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <atan+0x2fc>)
 8003ac8:	429e      	cmp	r6, r3
 8003aca:	da1a      	bge.n	8003b02 <atan+0x22a>
 8003acc:	2200      	movs	r2, #0
 8003ace:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <atan+0x300>)
 8003ad0:	f7fc fb42 	bl	8000158 <__aeabi_dsub>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460f      	mov	r7, r1
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <atan+0x300>)
 8003ae0:	f7fc fcf2 	bl	80004c8 <__aeabi_dmul>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <atan+0x2f4>)
 8003ae8:	f7fc fb38 	bl	800015c <__adddf3>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4630      	mov	r0, r6
 8003af2:	4639      	mov	r1, r7
 8003af4:	f7fc fe12 	bl	800071c <__aeabi_ddiv>
 8003af8:	f04f 0a02 	mov.w	sl, #2
 8003afc:	4604      	mov	r4, r0
 8003afe:	460d      	mov	r5, r1
 8003b00:	e749      	b.n	8003996 <atan+0xbe>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	2000      	movs	r0, #0
 8003b08:	4934      	ldr	r1, [pc, #208]	; (8003bdc <atan+0x304>)
 8003b0a:	f7fc fe07 	bl	800071c <__aeabi_ddiv>
 8003b0e:	f04f 0a03 	mov.w	sl, #3
 8003b12:	4604      	mov	r4, r0
 8003b14:	460d      	mov	r5, r1
 8003b16:	e73e      	b.n	8003996 <atan+0xbe>
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <atan+0x308>)
 8003b1a:	4e32      	ldr	r6, [pc, #200]	; (8003be4 <atan+0x30c>)
 8003b1c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003b20:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8003b24:	e9da 2300 	ldrd	r2, r3, [sl]
 8003b28:	f7fc fb16 	bl	8000158 <__aeabi_dsub>
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	f7fc fb12 	bl	8000158 <__aeabi_dsub>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003b3c:	f7fc fb0c 	bl	8000158 <__aeabi_dsub>
 8003b40:	f1bb 0f00 	cmp.w	fp, #0
 8003b44:	4604      	mov	r4, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	f6bf aee4 	bge.w	8003914 <atan+0x3c>
 8003b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b50:	461d      	mov	r5, r3
 8003b52:	e6df      	b.n	8003914 <atan+0x3c>
 8003b54:	4d24      	ldr	r5, [pc, #144]	; (8003be8 <atan+0x310>)
 8003b56:	e6dd      	b.n	8003914 <atan+0x3c>
 8003b58:	8800759c 	.word	0x8800759c
 8003b5c:	7e37e43c 	.word	0x7e37e43c
 8003b60:	e322da11 	.word	0xe322da11
 8003b64:	3f90ad3a 	.word	0x3f90ad3a
 8003b68:	24760deb 	.word	0x24760deb
 8003b6c:	3fa97b4b 	.word	0x3fa97b4b
 8003b70:	a0d03d51 	.word	0xa0d03d51
 8003b74:	3fb10d66 	.word	0x3fb10d66
 8003b78:	c54c206e 	.word	0xc54c206e
 8003b7c:	3fb745cd 	.word	0x3fb745cd
 8003b80:	920083ff 	.word	0x920083ff
 8003b84:	3fc24924 	.word	0x3fc24924
 8003b88:	5555550d 	.word	0x5555550d
 8003b8c:	3fd55555 	.word	0x3fd55555
 8003b90:	2c6a6c2f 	.word	0x2c6a6c2f
 8003b94:	bfa2b444 	.word	0xbfa2b444
 8003b98:	52defd9a 	.word	0x52defd9a
 8003b9c:	3fadde2d 	.word	0x3fadde2d
 8003ba0:	af749a6d 	.word	0xaf749a6d
 8003ba4:	3fb3b0f2 	.word	0x3fb3b0f2
 8003ba8:	fe231671 	.word	0xfe231671
 8003bac:	3fbc71c6 	.word	0x3fbc71c6
 8003bb0:	9998ebc4 	.word	0x9998ebc4
 8003bb4:	3fc99999 	.word	0x3fc99999
 8003bb8:	440fffff 	.word	0x440fffff
 8003bbc:	7ff00000 	.word	0x7ff00000
 8003bc0:	54442d18 	.word	0x54442d18
 8003bc4:	bff921fb 	.word	0xbff921fb
 8003bc8:	3fdbffff 	.word	0x3fdbffff
 8003bcc:	3ff00000 	.word	0x3ff00000
 8003bd0:	3ff2ffff 	.word	0x3ff2ffff
 8003bd4:	40038000 	.word	0x40038000
 8003bd8:	3ff80000 	.word	0x3ff80000
 8003bdc:	bff00000 	.word	0xbff00000
 8003be0:	08003fb0 	.word	0x08003fb0
 8003be4:	08003f90 	.word	0x08003f90
 8003be8:	3ff921fb 	.word	0x3ff921fb

08003bec <fabs>:
 8003bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003bf0:	4770      	bx	lr

08003bf2 <atan2>:
 8003bf2:	f000 b82d 	b.w	8003c50 <__ieee754_atan2>
	...

08003bf8 <sqrt>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	f000 f8f9 	bl	8003df4 <__ieee754_sqrt>
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <sqrt+0x54>)
 8003c04:	4604      	mov	r4, r0
 8003c06:	f993 3000 	ldrsb.w	r3, [r3]
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	d019      	beq.n	8003c44 <sqrt+0x4c>
 8003c10:	4632      	mov	r2, r6
 8003c12:	463b      	mov	r3, r7
 8003c14:	4630      	mov	r0, r6
 8003c16:	4639      	mov	r1, r7
 8003c18:	f7fc fef0 	bl	80009fc <__aeabi_dcmpun>
 8003c1c:	b990      	cbnz	r0, 8003c44 <sqrt+0x4c>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2300      	movs	r3, #0
 8003c22:	4630      	mov	r0, r6
 8003c24:	4639      	mov	r1, r7
 8003c26:	f7fc fec1 	bl	80009ac <__aeabi_dcmplt>
 8003c2a:	b158      	cbz	r0, 8003c44 <sqrt+0x4c>
 8003c2c:	f7ff fe20 	bl	8003870 <__errno>
 8003c30:	2321      	movs	r3, #33	; 0x21
 8003c32:	2200      	movs	r2, #0
 8003c34:	6003      	str	r3, [r0, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fc fd6e 	bl	800071c <__aeabi_ddiv>
 8003c40:	4604      	mov	r4, r0
 8003c42:	460d      	mov	r5, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000100 	.word	0x20000100

08003c50 <__ieee754_atan2>:
 8003c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	4692      	mov	sl, r2
 8003c56:	4699      	mov	r9, r3
 8003c58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c5c:	461f      	mov	r7, r3
 8003c5e:	f1ca 0300 	rsb	r3, sl, #0
 8003c62:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8003df0 <__ieee754_atan2+0x1a0>
 8003c66:	ea43 030a 	orr.w	r3, r3, sl
 8003c6a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003c6e:	4573      	cmp	r3, lr
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	d808      	bhi.n	8003c88 <__ieee754_atan2+0x38>
 8003c76:	4246      	negs	r6, r0
 8003c78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c7c:	4306      	orrs	r6, r0
 8003c7e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003c82:	4576      	cmp	r6, lr
 8003c84:	468c      	mov	ip, r1
 8003c86:	d908      	bls.n	8003c9a <__ieee754_atan2+0x4a>
 8003c88:	4652      	mov	r2, sl
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fa64 	bl	800015c <__adddf3>
 8003c94:	4604      	mov	r4, r0
 8003c96:	460d      	mov	r5, r1
 8003c98:	e019      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003c9a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8003c9e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003ca2:	ea56 060a 	orrs.w	r6, r6, sl
 8003ca6:	d103      	bne.n	8003cb0 <__ieee754_atan2+0x60>
 8003ca8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	f7ff be14 	b.w	80038d8 <atan>
 8003cb0:	17be      	asrs	r6, r7, #30
 8003cb2:	f006 0602 	and.w	r6, r6, #2
 8003cb6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003cba:	ea53 0100 	orrs.w	r1, r3, r0
 8003cbe:	d10a      	bne.n	8003cd6 <__ieee754_atan2+0x86>
 8003cc0:	2e02      	cmp	r6, #2
 8003cc2:	d067      	beq.n	8003d94 <__ieee754_atan2+0x144>
 8003cc4:	2e03      	cmp	r6, #3
 8003cc6:	d102      	bne.n	8003cce <__ieee754_atan2+0x7e>
 8003cc8:	a53b      	add	r5, pc, #236	; (adr r5, 8003db8 <__ieee754_atan2+0x168>)
 8003cca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd6:	ea52 010a 	orrs.w	r1, r2, sl
 8003cda:	d106      	bne.n	8003cea <__ieee754_atan2+0x9a>
 8003cdc:	f1bc 0f00 	cmp.w	ip, #0
 8003ce0:	da63      	bge.n	8003daa <__ieee754_atan2+0x15a>
 8003ce2:	a537      	add	r5, pc, #220	; (adr r5, 8003dc0 <__ieee754_atan2+0x170>)
 8003ce4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ce8:	e7f1      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003cea:	4572      	cmp	r2, lr
 8003cec:	d10f      	bne.n	8003d0e <__ieee754_atan2+0xbe>
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	f106 36ff 	add.w	r6, r6, #4294967295
 8003cf4:	d107      	bne.n	8003d06 <__ieee754_atan2+0xb6>
 8003cf6:	2e02      	cmp	r6, #2
 8003cf8:	d850      	bhi.n	8003d9c <__ieee754_atan2+0x14c>
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <__ieee754_atan2+0x198>)
 8003cfc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003d00:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003d04:	e7e3      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003d06:	2e02      	cmp	r6, #2
 8003d08:	d84c      	bhi.n	8003da4 <__ieee754_atan2+0x154>
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <__ieee754_atan2+0x19c>)
 8003d0c:	e7f6      	b.n	8003cfc <__ieee754_atan2+0xac>
 8003d0e:	4573      	cmp	r3, lr
 8003d10:	d0e4      	beq.n	8003cdc <__ieee754_atan2+0x8c>
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003d18:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003d1c:	da20      	bge.n	8003d60 <__ieee754_atan2+0x110>
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	da01      	bge.n	8003d26 <__ieee754_atan2+0xd6>
 8003d22:	323c      	adds	r2, #60	; 0x3c
 8003d24:	db20      	blt.n	8003d68 <__ieee754_atan2+0x118>
 8003d26:	4652      	mov	r2, sl
 8003d28:	464b      	mov	r3, r9
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fcf5 	bl	800071c <__aeabi_ddiv>
 8003d32:	f7ff ff5b 	bl	8003bec <fabs>
 8003d36:	f7ff fdcf 	bl	80038d8 <atan>
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	460d      	mov	r5, r1
 8003d3e:	2e01      	cmp	r6, #1
 8003d40:	d015      	beq.n	8003d6e <__ieee754_atan2+0x11e>
 8003d42:	2e02      	cmp	r6, #2
 8003d44:	d017      	beq.n	8003d76 <__ieee754_atan2+0x126>
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	d0c1      	beq.n	8003cce <__ieee754_atan2+0x7e>
 8003d4a:	a31f      	add	r3, pc, #124	; (adr r3, 8003dc8 <__ieee754_atan2+0x178>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	4620      	mov	r0, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	f7fc fa00 	bl	8000158 <__aeabi_dsub>
 8003d58:	a31d      	add	r3, pc, #116	; (adr r3, 8003dd0 <__ieee754_atan2+0x180>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	e016      	b.n	8003d8e <__ieee754_atan2+0x13e>
 8003d60:	a51d      	add	r5, pc, #116	; (adr r5, 8003dd8 <__ieee754_atan2+0x188>)
 8003d62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d66:	e7ea      	b.n	8003d3e <__ieee754_atan2+0xee>
 8003d68:	2400      	movs	r4, #0
 8003d6a:	2500      	movs	r5, #0
 8003d6c:	e7e7      	b.n	8003d3e <__ieee754_atan2+0xee>
 8003d6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003d72:	461d      	mov	r5, r3
 8003d74:	e7ab      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003d76:	a314      	add	r3, pc, #80	; (adr r3, 8003dc8 <__ieee754_atan2+0x178>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc f9ea 	bl	8000158 <__aeabi_dsub>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	a111      	add	r1, pc, #68	; (adr r1, 8003dd0 <__ieee754_atan2+0x180>)
 8003d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d8e:	f7fc f9e3 	bl	8000158 <__aeabi_dsub>
 8003d92:	e77f      	b.n	8003c94 <__ieee754_atan2+0x44>
 8003d94:	a50e      	add	r5, pc, #56	; (adr r5, 8003dd0 <__ieee754_atan2+0x180>)
 8003d96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d9a:	e798      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003d9c:	a510      	add	r5, pc, #64	; (adr r5, 8003de0 <__ieee754_atan2+0x190>)
 8003d9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003da2:	e794      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003da4:	2400      	movs	r4, #0
 8003da6:	2500      	movs	r5, #0
 8003da8:	e791      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003daa:	a50b      	add	r5, pc, #44	; (adr r5, 8003dd8 <__ieee754_atan2+0x188>)
 8003dac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003db0:	e78d      	b.n	8003cce <__ieee754_atan2+0x7e>
 8003db2:	bf00      	nop
 8003db4:	f3af 8000 	nop.w
 8003db8:	54442d18 	.word	0x54442d18
 8003dbc:	c00921fb 	.word	0xc00921fb
 8003dc0:	54442d18 	.word	0x54442d18
 8003dc4:	bff921fb 	.word	0xbff921fb
 8003dc8:	33145c07 	.word	0x33145c07
 8003dcc:	3ca1a626 	.word	0x3ca1a626
 8003dd0:	54442d18 	.word	0x54442d18
 8003dd4:	400921fb 	.word	0x400921fb
 8003dd8:	54442d18 	.word	0x54442d18
 8003ddc:	3ff921fb 	.word	0x3ff921fb
 8003de0:	54442d18 	.word	0x54442d18
 8003de4:	3fe921fb 	.word	0x3fe921fb
 8003de8:	08003fd0 	.word	0x08003fd0
 8003dec:	08003fe8 	.word	0x08003fe8
 8003df0:	7ff00000 	.word	0x7ff00000

08003df4 <__ieee754_sqrt>:
 8003df4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003f48 <__ieee754_sqrt+0x154>
 8003df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfc:	ea3c 0c01 	bics.w	ip, ip, r1
 8003e00:	460b      	mov	r3, r1
 8003e02:	4606      	mov	r6, r0
 8003e04:	460d      	mov	r5, r1
 8003e06:	460a      	mov	r2, r1
 8003e08:	4607      	mov	r7, r0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	d10e      	bne.n	8003e2c <__ieee754_sqrt+0x38>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	f7fc fb5a 	bl	80004c8 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f7fc f99e 	bl	800015c <__adddf3>
 8003e20:	4606      	mov	r6, r0
 8003e22:	460d      	mov	r5, r1
 8003e24:	4630      	mov	r0, r6
 8003e26:	4629      	mov	r1, r5
 8003e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	dc0d      	bgt.n	8003e4c <__ieee754_sqrt+0x58>
 8003e30:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003e34:	ea5c 0707 	orrs.w	r7, ip, r7
 8003e38:	d0f4      	beq.n	8003e24 <__ieee754_sqrt+0x30>
 8003e3a:	b139      	cbz	r1, 8003e4c <__ieee754_sqrt+0x58>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f7fc f98b 	bl	8000158 <__aeabi_dsub>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	f7fc fc69 	bl	800071c <__aeabi_ddiv>
 8003e4a:	e7e9      	b.n	8003e20 <__ieee754_sqrt+0x2c>
 8003e4c:	1512      	asrs	r2, r2, #20
 8003e4e:	d074      	beq.n	8003f3a <__ieee754_sqrt+0x146>
 8003e50:	2000      	movs	r0, #0
 8003e52:	07d5      	lsls	r5, r2, #31
 8003e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e58:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8003e5c:	bf5e      	ittt	pl
 8003e5e:	0fe3      	lsrpl	r3, r4, #31
 8003e60:	0064      	lslpl	r4, r4, #1
 8003e62:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8003e66:	0fe3      	lsrs	r3, r4, #31
 8003e68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003e6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003e70:	2516      	movs	r5, #22
 8003e72:	4601      	mov	r1, r0
 8003e74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e78:	1076      	asrs	r6, r6, #1
 8003e7a:	0064      	lsls	r4, r4, #1
 8003e7c:	188f      	adds	r7, r1, r2
 8003e7e:	429f      	cmp	r7, r3
 8003e80:	bfde      	ittt	le
 8003e82:	1bdb      	suble	r3, r3, r7
 8003e84:	18b9      	addle	r1, r7, r2
 8003e86:	1880      	addle	r0, r0, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	3d01      	subs	r5, #1
 8003e8c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003e90:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003e94:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003e98:	d1f0      	bne.n	8003e7c <__ieee754_sqrt+0x88>
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	f04f 0e20 	mov.w	lr, #32
 8003ea0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	eb07 0c05 	add.w	ip, r7, r5
 8003eaa:	dc02      	bgt.n	8003eb2 <__ieee754_sqrt+0xbe>
 8003eac:	d113      	bne.n	8003ed6 <__ieee754_sqrt+0xe2>
 8003eae:	45a4      	cmp	ip, r4
 8003eb0:	d811      	bhi.n	8003ed6 <__ieee754_sqrt+0xe2>
 8003eb2:	f1bc 0f00 	cmp.w	ip, #0
 8003eb6:	eb0c 0507 	add.w	r5, ip, r7
 8003eba:	da43      	bge.n	8003f44 <__ieee754_sqrt+0x150>
 8003ebc:	2d00      	cmp	r5, #0
 8003ebe:	db41      	blt.n	8003f44 <__ieee754_sqrt+0x150>
 8003ec0:	f101 0801 	add.w	r8, r1, #1
 8003ec4:	1a5b      	subs	r3, r3, r1
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	45a4      	cmp	ip, r4
 8003eca:	bf88      	it	hi
 8003ecc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003ed0:	eba4 040c 	sub.w	r4, r4, ip
 8003ed4:	443a      	add	r2, r7
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	f1be 0e01 	subs.w	lr, lr, #1
 8003edc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003ee0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003ee4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003ee8:	d1dc      	bne.n	8003ea4 <__ieee754_sqrt+0xb0>
 8003eea:	4323      	orrs	r3, r4
 8003eec:	d006      	beq.n	8003efc <__ieee754_sqrt+0x108>
 8003eee:	1c54      	adds	r4, r2, #1
 8003ef0:	bf0b      	itete	eq
 8003ef2:	4672      	moveq	r2, lr
 8003ef4:	3201      	addne	r2, #1
 8003ef6:	3001      	addeq	r0, #1
 8003ef8:	f022 0201 	bicne.w	r2, r2, #1
 8003efc:	1043      	asrs	r3, r0, #1
 8003efe:	07c1      	lsls	r1, r0, #31
 8003f00:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003f08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003f0c:	bf48      	it	mi
 8003f0e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003f12:	4610      	mov	r0, r2
 8003f14:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003f18:	e782      	b.n	8003e20 <__ieee754_sqrt+0x2c>
 8003f1a:	0ae3      	lsrs	r3, r4, #11
 8003f1c:	3915      	subs	r1, #21
 8003f1e:	0564      	lsls	r4, r4, #21
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0fa      	beq.n	8003f1a <__ieee754_sqrt+0x126>
 8003f24:	02de      	lsls	r6, r3, #11
 8003f26:	d50a      	bpl.n	8003f3e <__ieee754_sqrt+0x14a>
 8003f28:	f1c2 0020 	rsb	r0, r2, #32
 8003f2c:	fa24 f000 	lsr.w	r0, r4, r0
 8003f30:	1e55      	subs	r5, r2, #1
 8003f32:	4094      	lsls	r4, r2
 8003f34:	4303      	orrs	r3, r0
 8003f36:	1b4a      	subs	r2, r1, r5
 8003f38:	e78a      	b.n	8003e50 <__ieee754_sqrt+0x5c>
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	e7f0      	b.n	8003f20 <__ieee754_sqrt+0x12c>
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	3201      	adds	r2, #1
 8003f42:	e7ef      	b.n	8003f24 <__ieee754_sqrt+0x130>
 8003f44:	4688      	mov	r8, r1
 8003f46:	e7bd      	b.n	8003ec4 <__ieee754_sqrt+0xd0>
 8003f48:	7ff00000 	.word	0x7ff00000

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
